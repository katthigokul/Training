version: '3'

services:
  eureka-server:
    build: eureka-server/
    container_name: eureka-container
    restart: always
    network_mode: "host"
    hostname: localhost
    ports:
      - 8085:8085

  config-service:
    build: config-server/
    container_name: config-server-container
    restart: always
    network_mode: "host"
    hostname: localhost
    ports:
      - 8888:8888

  zuul-api:
    build: zuul-api/
    container_name: zuul-container
    depends_on:
      - eureka-server
    restart: always
    network_mode: "host"
    hostname: localhost
    ports:
      - 8081:8081

  mysql:
    image: mysql
    ports:
      - 3306:3306
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: userdetailsdb
      MYSQL_PASSWORD: root
      MYSQL_USER: root
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
    volumes:
      - $HOME/data/datasql:/var/lib/mysql
    network_mode: "host"
    hostname: localhost
    restart: always

  authentication-service:
    build: authentication-service/
    container_name: authentication
    network_mode: "host"
    hostname: localhost
    depends_on:
      - mysql
      - eureka-server
      - config-service
      - rabbitmq
    restart: always
    ports:
      - 8082:8082

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    ports:
      - 5672:5672
      - 15672:15672
    hostname: localhost
    network_mode: host

  product-service:
    build: product-service/
    container_name: product-service
    network_mode: "host"
    hostname: localhost
    depends_on:
      - mongo
      - rabbitmq
      - eureka-server
      - config-service
    restart: always
    ports:
      - 8000:8000

  mongo:
    image: mongo
    container_name: mongo-container
    restart: always
    network_mode: "host"
    hostname: localhost
    ports:
      - 27017:27017
    volumes:
      - $HOME/mongo:/data/db

  neo4jdb:
    image: neo4j:latest
    container_name: testneo4j
    volumes:
      - ./ne04j/data:/data
      - ./ne04j/import:/var/lib/neo4j/import
    ports:
      - 7474:7474
      - 7687:7687
    environment:
      - NEO4J_AUTH=neo4j/test
    network_mode: "host"
    hostname: localhost
    restart: always

  external-review-fetching-service:
    build:
      external-review-fetching-service
    container_name: external-review-fetching-service
    depends_on:
      - eureka-server
      - zuul-api
    restart: always
    ports:
      - 8099:8099
    network_mode: "host"
    hostname: localhost


  graph-query-service:
    build: graph-query-service/
    container_name: query
    network_mode: "host"
    hostname: localhost
    depends_on:
      - neo4jdb
      - eureka-server
      - config-service
    restart: always
    ports:
      - 8010:8010

  rating-service:
    build: rating-service/
    container_name: rating-container
    network_mode: "host"
    hostname: localhost
    depends_on:
      - mongo
      - config-service
    restart: always
    ports:
      - 8025:8025

  user-profile-service:
    build: user-profile-service/
    container_name: user-profile
    network_mode: "host"
    hostname: localhost
    depends_on:
      - mongo
      - rabbitmq
      - eureka-server
      - config-service
    restart: always
    ports:
      - 8050:8050

  wrw-front-end:
    build: wrw-front-end/.
    container_name: wrw-container
    network_mode: "host"
    hostname: localhost
    restart: always
    ports:
      - "4200:4200"

  orchestration-service:
    build: orchestration-service/
    container_name: orchestration-service-container
    network_mode: "host"
    hostname: localhost
    depends_on:
      - review-detector-service
      - rating-service
    restart: always
    ports:
      - 8060:8060

  graph-command-service:
    build: graph-command-service/
    container_name: graph-command-service-container
    network_mode: "host"
    hostname: localhost
    depends_on:
      - neo4jdb
      - eureka-server
      - config-service
      - rabbitmq
    restart: always
    ports:
      - 8045:8045

  notification-service:
    build: notification-service/
    container_name: notification-service-container
    network_mode: "host"
    hostname: localhost
    depends_on:
      - eureka-server
      - config-service
      - rabbitmq
    ports:
      - 8046:8046

  review-detector-service:
    build: review-detector-service/
    container_name: review-detector
    network_mode: "host"
    hostname: localhost
    depends_on:
      - eureka-server
    restart: always
    ports:
      - 8020:8020

volumes:
  docker-volume:
